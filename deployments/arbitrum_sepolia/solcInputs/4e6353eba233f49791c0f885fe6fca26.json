{
  "language": "Solidity",
  "sources": {
    "contracts/CamelotFactory.sol": {
      "content": "pragma solidity =0.5.16;\n\nimport './interfaces/ICamelotFactory.sol';\nimport './CamelotPair.sol';\n\ncontract CamelotFactory is ICamelotFactory {\n    address public owner;\n    address public feePercentOwner;\n    address public setStableOwner;\n    address public feeTo;\n\n    //uint public constant FEE_DENOMINATOR = 100000;\n    uint public constant OWNER_FEE_SHARE_MAX = 100000; // 100%\n    uint public ownerFeeShare = 50000; // default value = 50%\n\n    uint public constant REFERER_FEE_SHARE_MAX = 20000; // 20%\n    mapping(address => uint) public referrersFeeShare; // fees are taken from the user input\n\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n\n    event FeeToTransferred(address indexed prevFeeTo, address indexed newFeeTo);\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint length);\n    event OwnerFeeShareUpdated(uint prevOwnerFeeShare, uint ownerFeeShare);\n    event OwnershipTransferred(address indexed prevOwner, address indexed newOwner);\n    event FeePercentOwnershipTransferred(address indexed prevOwner, address indexed newOwner);\n    event SetStableOwnershipTransferred(address indexed prevOwner, address indexed newOwner);\n    event ReferrerFeeShareUpdated(address referrer, uint prevReferrerFeeShare, uint referrerFeeShare);\n\n    constructor(address feeTo_) public {\n        owner = msg.sender;\n        feePercentOwner = msg.sender;\n        setStableOwner = msg.sender;\n        feeTo = feeTo_;\n\n        emit OwnershipTransferred(address(0), msg.sender);\n        emit FeePercentOwnershipTransferred(address(0), msg.sender);\n        emit SetStableOwnershipTransferred(address(0), msg.sender);\n        emit FeeToTransferred(address(0), feeTo_);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"CamelotFactory: caller is not the owner\");\n        _;\n    }\n\n    function allPairsLength() external view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n        require(tokenA != tokenB, 'CamelotFactory: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'CamelotFactory: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'CamelotFactory: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(CamelotPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        require(pair != address(0), \"CamelotFactory: FAILED\");\n        CamelotPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        require(_owner != address(0), \"CamelotFactory: zero address\");\n        emit OwnershipTransferred(owner, _owner);\n        owner = _owner;\n    }\n\n    function setFeePercentOwner(address _feePercentOwner) external onlyOwner {\n        require(_feePercentOwner != address(0), \"CamelotFactory: zero address\");\n        emit FeePercentOwnershipTransferred(feePercentOwner, _feePercentOwner);\n        feePercentOwner = _feePercentOwner;\n    }\n\n    function setSetStableOwner(address _setStableOwner) external {\n        require(msg.sender == setStableOwner, \"CamelotFactory: not setStableOwner\");\n        require(_setStableOwner != address(0), \"CamelotFactory: zero address\");\n        emit SetStableOwnershipTransferred(setStableOwner, _setStableOwner);\n        setStableOwner = _setStableOwner;\n    }\n\n    function setFeeTo(address _feeTo) external onlyOwner {\n        emit FeeToTransferred(feeTo, _feeTo);\n        feeTo = _feeTo;\n    }\n\n    /**\n     * @dev Updates the share of fees attributed to the owner\n     *\n     * Must only be called by owner\n     */\n    function setOwnerFeeShare(uint newOwnerFeeShare) external onlyOwner {\n        require(newOwnerFeeShare > 0, \"CamelotFactory: ownerFeeShare mustn't exceed minimum\");\n        require(newOwnerFeeShare <= OWNER_FEE_SHARE_MAX, \"CamelotFactory: ownerFeeShare mustn't exceed maximum\");\n        emit OwnerFeeShareUpdated(ownerFeeShare, newOwnerFeeShare);\n        ownerFeeShare = newOwnerFeeShare;\n    }\n\n    /**\n     * @dev Updates the share of fees attributed to the given referrer when a swap went through him\n     *\n     * Must only be called by owner\n     */\n    function setReferrerFeeShare(address referrer, uint referrerFeeShare) external onlyOwner {\n        require(referrer != address(0), \"CamelotFactory: zero address\");\n        require(referrerFeeShare <= REFERER_FEE_SHARE_MAX, \"CamelotFactory: referrerFeeShare mustn't exceed maximum\");\n        emit ReferrerFeeShareUpdated(referrer, referrersFeeShare[referrer], referrerFeeShare);\n        referrersFeeShare[referrer] = referrerFeeShare;\n    }\n\n    function feeInfo() external view returns (uint _ownerFeeShare, address _feeTo) {\n        _ownerFeeShare = ownerFeeShare;\n        _feeTo = feeTo;\n    }\n}\n"
    },
    "contracts/CamelotPair.sol": {
      "content": "pragma solidity =0.5.16;\n\nimport './interfaces/ICamelotPair.sol';\nimport './UniswapV2ERC20.sol';\nimport './libraries/Math.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/ICamelotFactory.sol';\nimport './interfaces/IUniswapV2Callee.sol';\n\ncontract CamelotPair is ICamelotPair, UniswapV2ERC20 {\n  using SafeMath  for uint;\n\n  uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\n  bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n  address public factory;\n  address public token0;\n  address public token1;\n\n  bool public initialized;\n\n  uint public constant FEE_DENOMINATOR = 100000;\n  uint public constant MAX_FEE_PERCENT = 2000; // = 2%\n\n  uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n  uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n  uint16 public token0FeePercent = 300; // default = 0.3%  // uses single storage slot, accessible via getReserves\n  uint16 public token1FeePercent = 300; // default = 0.3%  // uses single storage slot, accessible via getReserves\n\n  uint public precisionMultiplier0;\n  uint public precisionMultiplier1;\n\n  uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n  bool public stableSwap; // if set to true, defines pair type as stable\n  bool public pairTypeImmutable; // if set to true, stableSwap states cannot be updated anymore\n\n  uint private unlocked = 1;\n  modifier lock() {\n    require(unlocked == 1, 'CamelotPair: LOCKED');\n    unlocked = 0;\n    _;\n    unlocked = 1;\n  }\n\n  function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint16 _token0FeePercent, uint16 _token1FeePercent) {\n    _reserve0 = reserve0;\n    _reserve1 = reserve1;\n    _token0FeePercent = token0FeePercent;\n    _token1FeePercent = token1FeePercent;\n  }\n\n  function _safeTransfer(address token, address to, uint value) private {\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'CamelotPair: TRANSFER_FAILED');\n  }\n\n  event DrainWrongToken(address indexed token, address to);\n  event FeePercentUpdated(uint16 token0FeePercent, uint16 token1FeePercent);\n  event SetStableSwap(bool prevStableSwap, bool stableSwap);\n  event SetPairTypeImmutable();\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n  event Skim();\n\n  constructor() public {\n    factory = msg.sender;\n  }\n\n  // called once by the factory at time of deployment\n  function initialize(address _token0, address _token1) external {\n    require(msg.sender == factory && !initialized, 'CamelotPair: FORBIDDEN');\n    // sufficient check\n    token0 = _token0;\n    token1 = _token1;\n\n    precisionMultiplier0 = 10 ** uint(IERC20(_token0).decimals());\n    precisionMultiplier1 = 10 ** uint(IERC20(_token1).decimals());\n\n    initialized = true;\n  }\n\n  /**\n  * @dev Updates the swap fees percent\n  *\n  * Can only be called by the factory's feeAmountOwner\n  */\n  function setFeePercent(uint16 newToken0FeePercent, uint16 newToken1FeePercent) external lock {\n    require(msg.sender == ICamelotFactory(factory).feePercentOwner(), \"CamelotPair: only factory's feeAmountOwner\");\n    require(newToken0FeePercent <= MAX_FEE_PERCENT && newToken1FeePercent <= MAX_FEE_PERCENT, \"CamelotPair: feePercent mustn't exceed the maximum\");\n    require(newToken0FeePercent > 0 && newToken1FeePercent > 0, \"CamelotPair: feePercent mustn't exceed the minimum\");\n    token0FeePercent = newToken0FeePercent;\n    token1FeePercent = newToken1FeePercent;\n    emit FeePercentUpdated(newToken0FeePercent, newToken1FeePercent);\n  }\n\n  function setStableSwap(bool stable, uint112 expectedReserve0, uint112 expectedReserve1) external lock {\n    require(msg.sender == ICamelotFactory(factory).setStableOwner(), \"CamelotPair: only factory's setStableOwner\");\n    require(!pairTypeImmutable, \"CamelotPair: immutable\");\n\n    require(stable != stableSwap, \"CamelotPair: no update\");\n    require(expectedReserve0 == reserve0 && expectedReserve1 == reserve1, \"CamelotPair: failed\");\n\n    bool feeOn = _mintFee(reserve0, reserve1);\n\n    emit SetStableSwap(stableSwap, stable);\n    stableSwap = stable;\n    kLast = (stable && feeOn) ? _k(uint(reserve0), uint(reserve1)) : 0;\n  }\n\n  function setPairTypeImmutable() external lock {\n    require(msg.sender == ICamelotFactory(factory).owner(), \"CamelotPair: only factory's owner\");\n    require(!pairTypeImmutable, \"CamelotPair: already immutable\");\n\n    pairTypeImmutable = true;\n    emit SetPairTypeImmutable();\n  }\n\n  // update reserves\n  function _update(uint balance0, uint balance1) private {\n    require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'CamelotPair: OVERFLOW');\n\n    reserve0 = uint112(balance0);\n    reserve1 = uint112(balance1);\n    emit Sync(uint112(balance0), uint112(balance1));\n  }\n\n  // if fee is on, mint liquidity equivalent to \"factory.ownerFeeShare()\" of the growth in sqrt(k)\n  // only for uni configuration\n  function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n    if(stableSwap) return false;\n\n    (uint ownerFeeShare, address feeTo) = ICamelotFactory(factory).feeInfo();\n    feeOn = feeTo != address(0);\n    uint _kLast = kLast;\n    // gas savings\n    if (feeOn) {\n      if (_kLast != 0) {\n        uint rootK = Math.sqrt(_k(uint(_reserve0), uint(_reserve1)));\n        uint rootKLast = Math.sqrt(_kLast);\n        if (rootK > rootKLast) {\n          uint d = (FEE_DENOMINATOR.mul(100) / ownerFeeShare).sub(100);\n          uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(100);\n          uint denominator = rootK.mul(d).add(rootKLast.mul(100));\n          uint liquidity = numerator / denominator;\n          if (liquidity > 0) _mint(feeTo, liquidity);\n        }\n      }\n    } else if (_kLast != 0) {\n      kLast = 0;\n    }\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function mint(address to) external lock returns (uint liquidity) {\n    (uint112 _reserve0, uint112 _reserve1,,) = getReserves();\n    // gas savings\n    uint balance0 = IERC20(token0).balanceOf(address(this));\n    uint balance1 = IERC20(token1).balanceOf(address(this));\n    uint amount0 = balance0.sub(_reserve0);\n    uint amount1 = balance1.sub(_reserve1);\n\n    bool feeOn = _mintFee(_reserve0, _reserve1);\n    uint _totalSupply = totalSupply;\n    // gas savings, must be defined here since totalSupply can update in _mintFee\n    if (_totalSupply == 0) {\n      liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n      _mint(address(0), MINIMUM_LIQUIDITY);\n      // permanently lock the first MINIMUM_LIQUIDITY tokens\n    } else {\n      liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n    }\n    require(liquidity > 0, 'CamelotPair: INSUFFICIENT_LIQUIDITY_MINTED');\n    _mint(to, liquidity);\n\n    _update(balance0, balance1);\n    if (feeOn) kLast = _k(uint(reserve0), uint(reserve1));\n    // reserve0 and reserve1 are up-to-date\n    emit Mint(msg.sender, amount0, amount1);\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function burn(address to) external lock returns (uint amount0, uint amount1) {\n    (uint112 _reserve0, uint112 _reserve1,,) = getReserves(); // gas savings\n    address _token0 = token0; // gas savings\n    address _token1 = token1; // gas savings\n    uint balance0 = IERC20(_token0).balanceOf(address(this));\n    uint balance1 = IERC20(_token1).balanceOf(address(this));\n    uint liquidity = balanceOf[address(this)];\n\n    bool feeOn = _mintFee(_reserve0, _reserve1);\n    uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n    require(amount0 > 0 && amount1 > 0, 'CamelotPair: INSUFFICIENT_LIQUIDITY_BURNED');\n    _burn(address(this), liquidity);\n    _safeTransfer(_token0, to, amount0);\n    _safeTransfer(_token1, to, amount1);\n    balance0 = IERC20(_token0).balanceOf(address(this));\n    balance1 = IERC20(_token1).balanceOf(address(this));\n\n    _update(balance0, balance1);\n    if (feeOn) kLast = _k(uint(reserve0), uint(reserve1)); // reserve0 and reserve1 are up-to-date\n    emit Burn(msg.sender, amount0, amount1, to);\n  }\n\n  struct TokensData {\n    address token0;\n    address token1;\n    uint amount0Out;\n    uint amount1Out;\n    uint balance0;\n    uint balance1;\n    uint remainingFee0;\n    uint remainingFee1;\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external {\n    TokensData memory tokensData = TokensData({\n      token0: token0,\n      token1: token1,\n      amount0Out: amount0Out,\n      amount1Out: amount1Out,\n      balance0: 0,\n      balance1: 0,\n      remainingFee0: 0,\n      remainingFee1: 0\n    });\n    _swap(tokensData, to, data, address(0));\n  }\n\n  // this low-level function should be called from a contract which performs important safety checks\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data, address referrer) external {\n    TokensData memory tokensData = TokensData({\n      token0: token0,\n      token1: token1,\n      amount0Out: amount0Out,\n      amount1Out: amount1Out,\n      balance0: 0,\n      balance1: 0,\n      remainingFee0: 0,\n      remainingFee1: 0\n    });\n    _swap(tokensData, to, data, referrer);\n  }\n\n\n  function _swap(TokensData memory tokensData, address to, bytes memory data, address referrer) internal lock {\n    require(tokensData.amount0Out > 0 || tokensData.amount1Out > 0, 'CamelotPair: INSUFFICIENT_OUTPUT_AMOUNT');\n\n    (uint112 _reserve0, uint112 _reserve1, uint16 _token0FeePercent, uint16 _token1FeePercent) = getReserves();\n    require(tokensData.amount0Out < _reserve0 && tokensData.amount1Out < _reserve1, 'CamelotPair: INSUFFICIENT_LIQUIDITY');\n\n\n    {\n      require(to != tokensData.token0 && to != tokensData.token1, 'CamelotPair: INVALID_TO');\n      // optimistically transfer tokens\n      if (tokensData.amount0Out > 0) _safeTransfer(tokensData.token0, to, tokensData.amount0Out);\n      // optimistically transfer tokens\n      if (tokensData.amount1Out > 0) _safeTransfer(tokensData.token1, to, tokensData.amount1Out);\n      if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, tokensData.amount0Out, tokensData.amount1Out, data);\n      tokensData.balance0 = IERC20(tokensData.token0).balanceOf(address(this));\n      tokensData.balance1 = IERC20(tokensData.token1).balanceOf(address(this));\n    }\n\n    uint amount0In = tokensData.balance0 > _reserve0 - tokensData.amount0Out ? tokensData.balance0 - (_reserve0 - tokensData.amount0Out) : 0;\n    uint amount1In = tokensData.balance1 > _reserve1 - tokensData.amount1Out ? tokensData.balance1 - (_reserve1 - tokensData.amount1Out) : 0;\n    require(amount0In > 0 || amount1In > 0, 'CamelotPair: INSUFFICIENT_INPUT_AMOUNT');\n\n    tokensData.remainingFee0 = amount0In.mul(_token0FeePercent) / FEE_DENOMINATOR;\n    tokensData.remainingFee1 = amount1In.mul(_token1FeePercent) / FEE_DENOMINATOR;\n\n    {// scope for referer/stable fees management\n      uint fee = 0;\n\n      uint referrerInputFeeShare = referrer != address(0) ? ICamelotFactory(factory).referrersFeeShare(referrer) : 0;\n      if (referrerInputFeeShare > 0) {\n        if (amount0In > 0) {\n          fee = amount0In.mul(referrerInputFeeShare).mul(_token0FeePercent) / (FEE_DENOMINATOR ** 2);\n          tokensData.remainingFee0 = tokensData.remainingFee0.sub(fee);\n          _safeTransfer(tokensData.token0, referrer, fee);\n        }\n        if (amount1In > 0) {\n          fee = amount1In.mul(referrerInputFeeShare).mul(_token1FeePercent) / (FEE_DENOMINATOR ** 2);\n          tokensData.remainingFee1 = tokensData.remainingFee1.sub(fee);\n          _safeTransfer(tokensData.token1, referrer, fee);\n        }\n      }\n\n      if(stableSwap){\n        (uint ownerFeeShare, address feeTo) = ICamelotFactory(factory).feeInfo();\n        if(feeTo != address(0)) {\n          ownerFeeShare = FEE_DENOMINATOR.sub(referrerInputFeeShare).mul(ownerFeeShare);\n          if (amount0In > 0) {\n            fee = amount0In.mul(ownerFeeShare).mul(_token0FeePercent) / (FEE_DENOMINATOR ** 3);\n            tokensData.remainingFee0 = tokensData.remainingFee0.sub(fee);\n            _safeTransfer(tokensData.token0, feeTo, fee);\n          }\n          if (amount1In > 0) {\n            fee = amount1In.mul(ownerFeeShare).mul(_token1FeePercent) / (FEE_DENOMINATOR ** 3);\n            tokensData.remainingFee1 = tokensData.remainingFee1.sub(fee);\n            _safeTransfer(tokensData.token1, feeTo, fee);\n          }\n        }\n      }\n      // readjust tokens balance\n      if (amount0In > 0) tokensData.balance0 = IERC20(tokensData.token0).balanceOf(address(this));\n      if (amount1In > 0) tokensData.balance1 = IERC20(tokensData.token1).balanceOf(address(this));\n    }\n    {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\n      uint balance0Adjusted = tokensData.balance0.sub(tokensData.remainingFee0);\n      uint balance1Adjusted = tokensData.balance1.sub(tokensData.remainingFee1);\n      require(_k(balance0Adjusted, balance1Adjusted) >= _k(uint(_reserve0), uint(_reserve1)), 'CamelotPair: K');\n    }\n    _update(tokensData.balance0, tokensData.balance1);\n    emit Swap(msg.sender, amount0In, amount1In, tokensData.amount0Out, tokensData.amount1Out, to);\n  }\n\n  function _k(uint balance0, uint balance1) internal view returns (uint) {\n    if (stableSwap) {\n      uint _x = balance0.mul(1e18) / precisionMultiplier0;\n      uint _y = balance1.mul(1e18) / precisionMultiplier1;\n      uint _a = (_x.mul(_y)) / 1e18;\n      uint _b = (_x.mul(_x) / 1e18).add(_y.mul(_y) / 1e18);\n      return  _a.mul(_b) / 1e18; // x3y+y3x >= k\n    }\n    return balance0.mul(balance1);\n  }\n\n  function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\n    for (uint i = 0; i < 255; i++) {\n      uint y_prev = y;\n      uint k = _f(x0, y);\n      if (k < xy) {\n        uint dy = (xy - k) * 1e18 / _d(x0, y);\n        y = y + dy;\n      } else {\n        uint dy = (k - xy) * 1e18 / _d(x0, y);\n        y = y - dy;\n      }\n      if (y > y_prev) {\n        if (y - y_prev <= 1) {\n          return y;\n        }\n      } else {\n        if (y_prev - y <= 1) {\n          return y;\n        }\n      }\n    }\n    return y;\n  }\n\n  function _f(uint x0, uint y) internal pure returns (uint) {\n    return x0 * (y * y / 1e18 * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18) * y / 1e18;\n  }\n\n  function _d(uint x0, uint y) internal pure returns (uint) {\n    return 3 * x0 * (y * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18);\n  }\n\n  function getAmountOut(uint amountIn, address tokenIn) external view returns (uint) {\n    uint16 feePercent = tokenIn == token0 ? token0FeePercent : token1FeePercent;\n    return _getAmountOut(amountIn, tokenIn, uint(reserve0), uint(reserve1), feePercent);\n  }\n\n  function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1, uint feePercent) internal view returns (uint) {\n    if (stableSwap) {\n      amountIn = amountIn.sub(amountIn.mul(feePercent) / FEE_DENOMINATOR); // remove fee from amount received\n      uint xy = _k(_reserve0, _reserve1);\n      _reserve0 = _reserve0 * 1e18 / precisionMultiplier0;\n      _reserve1 = _reserve1 * 1e18 / precisionMultiplier1;\n\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n      amountIn = tokenIn == token0 ? amountIn * 1e18 / precisionMultiplier0 : amountIn * 1e18 / precisionMultiplier1;\n      uint y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\n      return y * (tokenIn == token0 ? precisionMultiplier1 : precisionMultiplier0) / 1e18;\n\n    } else {\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n      amountIn = amountIn.mul(FEE_DENOMINATOR.sub(feePercent));\n      return (amountIn.mul(reserveB)) / (reserveA.mul(FEE_DENOMINATOR).add(amountIn));\n    }\n  }\n\n  // force balances to match reserves\n  function skim(address to) external lock {\n    address _token0 = token0;\n    // gas savings\n    address _token1 = token1;\n    // gas savings\n    _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n    _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    emit Skim();\n  }\n\n  // force reserves to match balances\n  function sync() external lock {\n    uint token0Balance = IERC20(token0).balanceOf(address(this));\n    uint token1Balance = IERC20(token1).balanceOf(address(this));\n    require(token0Balance != 0 && token1Balance != 0, \"CamelotPair: liquidity ratio not initialized\");\n    _update(token0Balance, token1Balance);\n  }\n\n  /**\n  * @dev Allow to recover token sent here by mistake\n  *\n  * Can only be called by factory's owner\n  */\n  function drainWrongToken(address token, address to) external lock {\n    require(msg.sender == ICamelotFactory(factory).owner(), \"CamelotPair: only factory's owner\");\n    require(token != token0 && token != token1, \"CamelotPair: invalid token\");\n    _safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n    emit DrainWrongToken(token, to);\n  }\n}\n"
    },
    "contracts/interfaces/ICamelotFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface ICamelotFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function owner() external view returns (address);\n    function feePercentOwner() external view returns (address);\n    function setStableOwner() external view returns (address);\n    function feeTo() external view returns (address);\n\n    function ownerFeeShare() external view returns (uint256);\n    function referrersFeeShare(address) external view returns (uint256);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint256) external view returns (address pair);\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function feeInfo() external view returns (uint _ownerFeeShare, address _feeTo);\n}\n"
    },
    "contracts/interfaces/ICamelotPair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface ICamelotPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint16 token0feePercent, uint16 token1FeePercent);\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function setFeePercent(uint16 token0FeePercent, uint16 token1FeePercent) external;\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data, address referrer) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Callee.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "pragma solidity =0.5.16;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity =0.5.16;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/test/ERC20.sol": {
      "content": "pragma solidity >=0.5.16;\n\nimport '../UniswapV2ERC20.sol';\n\ncontract ERC20 is UniswapV2ERC20 {\n    constructor(uint _totalSupply) public {\n        _mint(msg.sender, _totalSupply);\n    }\n}\n"
    },
    "contracts/UniswapV2ERC20.sol": {
      "content": "pragma solidity =0.5.16;\n\nimport './interfaces/IUniswapV2ERC20.sol';\nimport './libraries/SafeMath.sol';\n\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = 'Camelot LP';\n    string public constant symbol = 'CMLT-LP';\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            uint remaining = allowance[from][msg.sender].sub(value);\n            allowance[from][msg.sender] = remaining;\n            emit Approval(from, msg.sender, remaining);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}